#!/usr/bin/env python
# ________  ___    ___ ________ _______  _________  ________  ___  ___
# |\   __  \|\  \  /  /|\  _____\\  ___ \|\___   ___\\   ____\|\  \|\  \
# \ \  \|\  \ \  \/  / | \  \__/\ \   __/\|___ \  \_\ \  \___|\ \  \\\  \
# \ \   ____\ \    / / \ \   __\\ \  \_|/__  \ \  \ \ \  \    \ \   __  \
#  \ \  \___|\/  /  /   \ \  \_| \ \  \_|\ \  \ \  \ \ \  \____\ \  \ \  \
#   \ \__\ __/  / /      \ \__\   \ \_______\  \ \__\ \ \_______\ \__\ \__\
#    \|__||\___/ /        \|__|    \|_______|   \|__|  \|_______|\|__|\|__|
#         \|___|/
# Made by Kreato
# Licensed Under GPL3-Or-Later

# import stuffs
import sys, platform, psutil, os, getpass, shutil
from colorama import init, Fore, Back, Style

# Setup colorama
init()

# get the args
args = sys.argv[1:]

# if needed print the help!
if "-h" in args or "--help" in args:
    # enjoy this lovely table made out of entirely unicode chars
    print('''pyfetch - a lighter and faster neofetch.
╔═════╦═══════════════════╦═════════════════════════════════════╗
║ -c  ║ --cpu             ║ CPU info & usage                    ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -d  ║ --disk            ║ Disk usage                          ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -m  ║ --memory          ║ RAM usage                           ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -uh ║ --userhostname    ║ user@hostname                       ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -p  ║ --packages        ║ Installed package count             ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -os ║ --operatingsystem ║ Which OS you have                   ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -t  ║ --terminal        ║ What type of terminal you are using ║
╠═════╬═══════════════════╬═════════════════════════════════════╣
║ -wm ║ --windowmanager   ║ Your current window manager         ║
╚═════╩═══════════════════╩═════════════════════════════════════╝''')
    exit()


# define important functions
def package_count():
    if os.name == 'posix':
        import distro
        current_distro = distro.linux_distribution()
    if 'Debian' in current_distro:
        packages = os.popen('apt list --installed | wc -l').read()
        print(Fore.RED + " " + Fore.WHITE + f"  {packages}")

    if 'Gentoo' in current_distro:
        packages = os.popen("ls -d /var/db/pkg/*/* | wc -l | awk '{printf $1 }'").read() 
        print(Fore.MAGENTA + " " + Fore.WHITE + f"  {packages}")

    # Experimental
    if 'Arch Linux' in current_distro:
        packages = os.popen('pacman -Q | wc -l').read()
        print(Fore.BLUE + " " + Fore.WHITE + f"  {packages}")


def pcpu():
    if os.name == 'posix':
        import distro
        current_distro = distro.linux_distribution()
        if 'Gentoo' in current_distro:
            print(Fore.MAGENTA + " " + Fore.WHITE + f"  {uname.processor} ({cpu}%)")
        elif 'Arch Linux' in current_distro:
            print(Fore.BLUE + " " + Fore.WHITE + f"  {uname.processor} ({cpu}%)")
        elif 'Debian' in current_distro:
            print(Fore.RED + " " + Fore.WHITE + f"  {uname.processor} ({cpu}%)")
        else:
            print(f"   {uname.processor} ({cpu}%)")

def pdisk():
    if os.name == 'posix':
        import distro
        current_distro = distro.linux_distribution()
        if 'Gentoo' in current_distro:
            print(Fore.MAGENTA + " " + Fore.WHITE + f"  {useddisk // (2 ** 30)}GiB / {freedisk // (2 ** 30)}GiB ({diskpercent_used}%)")
        elif 'Arch Linux' in current_distro:
            print(Fore.BLUE + " " + Fore.WHITE + f"  {useddisk // (2 ** 30)}GiB / {freedisk // (2 ** 30)}GiB ({diskpercent_used}%)")
        elif 'Debian' in current_distro:
            print(Fore.RED + " " + Fore.WHITE + f"  {useddisk // (2 ** 30)}GiB / {freedisk // (2 ** 30)}GiB ({diskpercent_used}%)")
        else:
            print(f"   {useddisk // (2 ** 30)}GiB / {freedisk // (2 ** 30)}GiB ({diskpercent_used}%)")


def pmemory():
    if os.name == 'posix':
        import distro
        current_distro = distro.linux_distribution()
        if 'Gentoo' in current_distro and used != 0: # if its not 0 GiB then show GiB instead of MiB
            print(Fore.MAGENTA + "  " + Fore.WHITE + f" {used}GiB / {total}GiB ({percent_used}%)")
        elif 'Arch Linux' in current_distro and used != 0:
            print(Fore.BLUE + "  " + Fore.WHITE + f" {used}GiB / {total}GiB ({percent_used}%)")
        elif 'Debian' in current_distro and used != 0:
            print(Fore.BLUE + "  " + Fore.WHITE + f" {used}GiB / {total}GiB ({percent_used}%)")
        elif 'Gentoo' in current_distro and used == 0: # if its 0 GiB then show MiB instead of GiB
            used2 = ram.used // (1024 ** 2)
            print(Fore.MAGENTA + "  " + Fore.WHITE + f" {used2}MiB / {total}GiB ({percent_used}%)")
        elif 'Arch Linux' in current_distro and used == 0:
            used2 = ram.used // (1024 ** 2)
            print(Fore.BLUE + "  " + Fore.WHITE + f" {used2}MiB / {total}GiB ({percent_used}%)")
        elif 'Debian' in current_distro and used == 0:
            used2 = ram.used // (1024 ** 2)
            print(Fore.RED  + "  " + Fore.WHITE + f" {used2}MiB / {total}GiB ({percent_used}%)")
        elif used == 0:
            used2 = ram.used // (1024 ** 2)
            print(f"   {used2}MiB / {total}GiB ({percent_used}%)")
        elif used != 0:
            print(f"   {used}GiB / {total}GiB ({percent_used}%)")

def puserhost():
    if os.name == 'posix':
        import distro
        current_distro = distro.linux_distribution()
        if 'Gentoo' in current_distro:
            print(Fore.MAGENTA + " " + Fore.WHITE + f"  {username}@{uname.node}")
        elif 'Arch Linux' in current_distro:
            print(Fore.BLUE + " " + Fore.WHITE + f"  {username}@{uname.node}")
        elif 'Debian' in current_distro:
            print(Fore.RED + " " + Fore.WHITE + f"  {username}@{uname.node}")
        else:
            print(f"   {username}@{uname.node}")

def pos():
    if os.name == 'nt':
        print(f"   {uname.system} {uname.release}")
    elif os.name == 'posix':
        import distro
        distro = distro.linux_distribution()
        result = ' '.join(map(str, distro))
    if 'Gentoo' in distro:
        print(Fore.MAGENTA + " " + Fore.WHITE + f"  {result} {uname.release}")
    elif 'Arch Linux' in distro:
        print(Fore.BLUE + " " + Fore.WHITE + f"  {result} {uname.release}")
    elif 'Debian' in distro:
        print(Fore.RED  + " " + Fore.WHITE + f"  {result} {uname.release}")
    else:
        print(f"  {result} {uname.release}")

def pterm():
    if "SHELL" in os.environ:
        shell = os.environ['SHELL']
        term = os.environ['TERM']  # hope this doesnt cause any issues
        if os.name == 'posix':
            import distro
            current_distro = distro.linux_distribution()
            if 'Gentoo' in current_distro:
                print( Fore.MAGENTA + "  " + Fore.WHITE + f"  {shell} {term}")
            elif 'Arch Linux' in current_distro:
                print( Fore.BLUE + "  " + Fore.WHITE + f"  {shell} {term}")
            elif 'Debian' in current_distro:
                print( Fore.RED + "  " + Fore.WHITE + f"  {shell} {term}")
            else:
                print(f"   {shell} {term}")
def pwm():
    if os.name == 'posix':
        wm = os.popen("wmctrl -m | awk -F'Name: ' '{printf $2}'").read()
        import distro
        distro = distro.linux_distribution()
        if 'Gentoo' in distro:
            print(Fore.MAGENTA + " " + Fore.WHITE +  f"  {wm}")
        elif 'Arch Linux' in distro:
            print(Fore.BLUE + " " + Fore.WHITE +  f"  {wm}")
        elif 'Debian' in distro:
            print(Fore.RED + " " + Fore.WHITE +  f"  {wm}")
        else:
            print(f"   {wm}")


# get system info n stuff
uname = platform.uname()
cpu = psutil.cpu_percent()
username = getpass.getuser()
ram = psutil.virtual_memory()
used = ram.used // (2 ** 30)
total = ram.total // (2 ** 30)
totaldisk, useddisk, freedisk = shutil.disk_usage("/")
diskpercent_used = round(useddisk / totaldisk * 100, 2)
percent_used = round(ram.used / ram.total * 100, 2)
# Yellowsink's super simple argument parsing. Who needs argparse when you have this???
for arg in args:
    if arg == "-c" or arg == "--cpu":
        pcpu()
    elif arg == "-d" or arg == "--disk":
        pdisk()
    elif arg == "-m" or arg == "--memory":
        pmemory()
    elif arg == "-uh" or arg == "--userhostname":
        puserhost()
    elif arg == "-p" or arg == "--packages":
        package_count()
    elif arg == "-os" or arg == "--operatingsystem":
        pos()
    elif arg == "-t" or arg == "--terminal":
        pterm()
    elif arg == "-wm" or arg == "--windowmanager":
        pwm()

if len(args) == 0:
    pdisk()
    puserhost()
    pcpu()
    pmemory()
    pterm()
    pwm()
    pos()
    package_count()
